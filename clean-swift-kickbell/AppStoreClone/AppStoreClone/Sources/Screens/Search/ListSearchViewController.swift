//
//  ListSearchViewController.swift
//  AppStoreClone
//
//  Created by jc.kim on 6/25/25.
//  Copyright (c) 2025 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListSearchDisplayLogic: class
{
  func displaySomething(viewModel: ListSearch.Something.ViewModel)
  func displayUpdatedSearchQuery(viewModel: ListSearch.UpdateSearchQuery.ViewModel)
  func displaySearchResults(viewModel: ListSearch.PerformSearch.ViewModel)
}

class ListSearchViewController: UIViewController, ListSearchDisplayLogic, UISearchBarDelegate
{
  var interactor: ListSearchBusinessLogic?
  var router: (NSObjectProtocol & ListSearchRoutingLogic & ListSearchDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = ListSearchInteractor()
    let presenter = ListSearchPresenter()
    let router = ListSearchRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: Views
  
  private let searchController: UISearchController = {
    let searchControler = UISearchController(searchResultsController: nil)
    searchControler.searchBar.placeholder = "게임, 앱, 스토리 등"
    return searchControler
  }()
  
  private let tableView: UITableView = {
    let tableView = UITableView()
    tableView.translatesAutoresizingMaskIntoConstraints = false
    tableView.separatorInset.right = 20
    tableView.register(headerFooterType: RecentSearchHeaderView.self)
    tableView.register(UITableViewCell.self, forCellReuseIdentifier: UITableViewCell.reuseIdentifier)
    tableView.register(SearchedTableViewCell.self, forCellReuseIdentifier: SearchedTableViewCell.reuseIdentifier)
    return tableView
  }()
  
  private let activityIndicatorView: UIActivityIndicatorView = {
    let activityIndicatorView = UIActivityIndicatorView()
    activityIndicatorView.translatesAutoresizingMaskIntoConstraints = false
    activityIndicatorView.style = .large
    activityIndicatorView.hidesWhenStopped = true
    return activityIndicatorView
  }()
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    setupUI()
    setupSubviews()
    setupConstraints()
    doSomething()
  }
  
  // MARK: UI Setup
  
  private func setupUI() {
    navigationController?.navigationBar.prefersLargeTitles = true
    navigationItem.searchController = searchController
    navigationItem.hidesSearchBarWhenScrolling = false
    view.backgroundColor = .systemBackground
    title = "검색"
    
    // 테이블뷰 설정
    tableView.dataSource = self
    tableView.delegate = self
    searchController.searchBar.delegate = self
  }
  
  private func setupSubviews() {
    view.addSubview(tableView)
    view.addSubview(activityIndicatorView)
  }
  
  private func setupConstraints() {
    NSLayoutConstraint.activate([
      tableView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
      tableView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),
      tableView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor),
      tableView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor),
      
      activityIndicatorView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
      activityIndicatorView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),
      activityIndicatorView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor),
      activityIndicatorView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor),
    ])
  }
  
  // MARK: Do something
  
  func doSomething()
  {
    let request = ListSearch.Something.Request()
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: ListSearch.Something.ViewModel)
  {
    // 임시 구현
  }
  
  // 검색 관련 데이터 저장을 위한 변수
  private var recentSearchItems: [ListSearch.SearchDisplayItemDTO] = []
  private var searchResultItems: [ListSearch.SearchDisplayItemDTO] = []
  private var currentQuery: String = ""
  
  func displayUpdatedSearchQuery(viewModel: ListSearch.UpdateSearchQuery.ViewModel)
  {
    // 임시 구현 - 최근 검색어 표시
    self.recentSearchItems = viewModel.recentSearchItems
    self.searchResultItems = []
    
    // 테이블뷰 새로고침
    tableView.reloadData()
  }
  
  func displaySearchResults(viewModel: ListSearch.PerformSearch.ViewModel)
  {
    // 검색 결과 표시
    self.searchResultItems = viewModel.searchResultItems
    self.currentQuery = viewModel.query
    self.recentSearchItems = []
    
    // 검색 중 표시자 숨기기
    activityIndicatorView.stopAnimating()
    
    // 테이블뷰 새로고침
    tableView.reloadData()
  }
  
  // MARK: - UISearchBarDelegate
  
  func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
    guard let searchText = searchBar.text else { return }
    let request = ListSearch.PerformSearch.Request(query: searchText)
    interactor?.performSearch(request: request)
  }
  
  func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
    let request = ListSearch.UpdateSearchQuery.Request(query: searchText)
    interactor?.updateSearchQuery(request: request)
  }
}

extension ListSearchViewController : UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        // 임시 구현 - 다음 단계에서 구현 예정
        return 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        // 임시 구현 - 다음 단계에서 구현 예정
        let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "Cell")
        cell.textLabel?.text = "검색 결과가 여기에 표시됩니다."
        cell.detailTextLabel?.text = "Clean Swift 아키텍처 구현 중"
        return cell
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        return "검색"
    }
}

extension ListSearchViewController : UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        // 임시 구현 - 다음 단계에서 구현 예정
        print("Selected row at \(indexPath.row)")
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 80
    }
}


